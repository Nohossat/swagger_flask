# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.models.base_model_ import Model
from src.models.tag import Tag  # noqa: F401,E501
from src import util


class TweetCreate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, text: str=None, tags: List[Tag]=None, tweet_date: str=None, media_url: str=None, sentiment: str=None):  # noqa: E501
        """TweetCreate - a model defined in Swagger

        :param text: The text of this TweetCreate.  # noqa: E501
        :type text: str
        :param tags: The tags of this TweetCreate.  # noqa: E501
        :type tags: List[Tag]
        :param tweet_date: The tweet_date of this TweetCreate.  # noqa: E501
        :type tweet_date: str
        :param media_url: The media_url of this TweetCreate.  # noqa: E501
        :type media_url: str
        :param sentiment: The sentiment of this TweetCreate.  # noqa: E501
        :type sentiment: str
        """
        self.swagger_types = {
            'text': str,
            'tags': List[Tag],
            'tweet_date': str,
            'media_url': str,
            'sentiment': str
        }

        self.attribute_map = {
            'text': 'text',
            'tags': 'tags',
            'tweet_date': 'tweetDate',
            'media_url': 'mediaUrl',
            'sentiment': 'sentiment'
        }
        self._text = text
        self._tags = tags
        self._tweet_date = tweet_date
        self._media_url = media_url
        self._sentiment = sentiment

    @classmethod
    def from_dict(cls, dikt) -> 'TweetCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TweetCreate of this TweetCreate.  # noqa: E501
        :rtype: TweetCreate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self) -> str:
        """Gets the text of this TweetCreate.


        :return: The text of this TweetCreate.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this TweetCreate.


        :param text: The text of this TweetCreate.
        :type text: str
        """

        self._text = text

    @property
    def tags(self) -> List[Tag]:
        """Gets the tags of this TweetCreate.


        :return: The tags of this TweetCreate.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[Tag]):
        """Sets the tags of this TweetCreate.


        :param tags: The tags of this TweetCreate.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def tweet_date(self) -> str:
        """Gets the tweet_date of this TweetCreate.


        :return: The tweet_date of this TweetCreate.
        :rtype: str
        """
        return self._tweet_date

    @tweet_date.setter
    def tweet_date(self, tweet_date: str):
        """Sets the tweet_date of this TweetCreate.


        :param tweet_date: The tweet_date of this TweetCreate.
        :type tweet_date: str
        """

        self._tweet_date = tweet_date

    @property
    def media_url(self) -> str:
        """Gets the media_url of this TweetCreate.


        :return: The media_url of this TweetCreate.
        :rtype: str
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url: str):
        """Sets the media_url of this TweetCreate.


        :param media_url: The media_url of this TweetCreate.
        :type media_url: str
        """

        self._media_url = media_url

    @property
    def sentiment(self) -> str:
        """Gets the sentiment of this TweetCreate.

        tweet status  # noqa: E501

        :return: The sentiment of this TweetCreate.
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment: str):
        """Sets the sentiment of this TweetCreate.

        tweet status  # noqa: E501

        :param sentiment: The sentiment of this TweetCreate.
        :type sentiment: str
        """
        allowed_values = ["undefined", "positive", "negative", "neutral"]  # noqa: E501
        if sentiment not in allowed_values:
            raise ValueError(
                "Invalid value for `sentiment` ({0}), must be one of {1}"
                .format(sentiment, allowed_values)
            )

        self._sentiment = sentiment
